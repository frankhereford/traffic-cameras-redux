services:
  postgis:
    image: postgis/postgis
    ports:
      - 5433:5432
    env_file:
      - .env
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./postgis/server.crt:/etc/ssl/server.crt:ro
      - ./postgis/server.key:/etc/ssl/server.key:ro
      - ./postgis/init.sh:/docker-entrypoint-initdb.d/init.sh
    command: postgres -c ssl=on -c ssl_cert_file=/etc/ssl/server.crt -c ssl_key_file=/etc/ssl/server.key

  redis:
    image: redis/redis-stack-server
    ports:
      - 6379:6379
    env_file:
      - .env
    volumes:
      - redis_data:/data
      - ./redis/server.crt:/etc/ssl/server.crt:ro
      - ./redis/server.key:/etc/ssl/server.key:ro
    command: >
      redis-server
      --loglevel verbose
      --tls-port 6379
      --port 0
      --requirepass ${REDIS_PASSWORD}
      --tls-cert-file /etc/ssl/server.crt
      --tls-key-file /etc/ssl/server.key
      --tls-ca-cert-file /etc/ssl/server.crt
      --tls-auth-clients no

  proxy:
    build: proxy
    platform: linux/amd64
    volumes:
      - ~/.aws-lambda-rie:/aws-lambda
    entrypoint: /aws-lambda/aws-lambda-rie
    command: /var/lang/bin/python -m awslambdaric proxy.handler
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env
    depends_on:
      - postgis
      - redis

  detector:
    build:
      context: detector
      args:
        - BEAM_TOKEN
    platform: linux/amd64
    volumes:
      - ~/.aws-lambda-rie:/aws-lambda
    entrypoint: /aws-lambda/aws-lambda-rie
    command: /var/lang/bin/python -m awslambdaric detector.handler
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env

  proxy-url:
    image: daido1976/aws-lambda-function-url-emulator
    ports:
      - "8080:8080"
    environment:
      RIE_ENDPOINT: "http://proxy:8080/2015-03-31/functions/function/invocations"
      ENABLE_CORS: "true"
    depends_on:
      - proxy

  nextjs:
    build:
      context: ./nextjs
    volumes:
      - ./nextjs:/app
    ports:
      - 3000:3000
      #- 5555:5555
    depends_on:
      - postgis

  haproxy:
    image: haproxy:latest
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - ./haproxy/ssl:/usr/local/etc/haproxy/ssl:ro
    ports:
      - 80:80
      - 443:443
      #- 3000:3000
    depends_on:
      - nextjs
      # - flask
      # - postgrest
      # - swagger

  #docker compose run --rm psql
  # psql:
  #   image: postgis/postgis
  #   env_file:
  #     - .env
  #   command: ["psql", "${DATABASE_URL}"]
  #   stdin_open: true
  #   tty: true
  #   depends_on:
  #     - postgis

volumes:
  db_data:
  redis_data:
